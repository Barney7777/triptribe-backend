name: Backend CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  cache-dependencies:
    runs-on: ubuntu-latest
    # defaults:
      # run:
      #   working-directory: ./
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js ${{ matrix.node-version }} - ${{ matrix.architecture }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        architecture: ${{ matrix.architecture }}
    
    - name: Cache Dependencies
      uses: actions/cache@v4
      id: cache-node-modules
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install Dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci --legacy-peer-deps
    
    - name: Lint code
      run: npm run lint
    # - name: Format code
    #   run: npm run prettier
    - name: Unit test
      continue-on-error: true
      run: npm run test
    - name: Test Coverage
      continue-on-error: true
      uses: ArtiomTr/jest-coverage-report-action@v2
    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage
  
  vulnerability-scan:
    needs: cache-dependencies
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: ./
    strategy:
      matrix:
        node-version: [20.x]
        architecture: [x64]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Install project dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci --legacy-peer-deps
      
    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v8
    - name: SAST with SonarCloud
      uses: sonarsource/sonarcloud-github-action@master
      env:
        _GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
      # projectBaseDir: .
        args: >
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.sources=.
          -Dsonar.verbose=true

    - name: File System Scan
      run: echo "Scaning files"
    - name: Archive scan reslts
      run: echo "Archiving scan results"

  build:
    needs: vulnerability-scan
    runs-on: ubuntu-latest
    env: 
      ECR_REPOSITORY: ${{ secrets.BACKEND_REPO }}
      IMAGE_TAG: ${{ github.sha }}
      AWS_DEFAULT_REGION: ap-southeast-2
      DATABASE_URI: ${{ secrets.DATABASE_URI }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      MAX_FILE_SIZE: ${{ secrets.MAX_FILE_SIZE }}
      MAX_FILES: ${{ secrets.MAX_FILES }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      PUBLIC_ASSETS_URL: ${{ secrets.PUBLIC_ASSETS_URL }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v3
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set ECR_REGISTRY env var
      run: |
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

    - name: Build Docker Image
      id: build-image
      run: |
        echo "Building Docker Image"
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        chmod +x build.sh
        ./build.sh
    
    - name: Image Scan
      id: scan-image
      run:
        echo "Scanning Docker Image"
    - name: Archive Image Scan Results
      run:
        echo "Archiving Image Scan Results"
    
    - name: Push Docker Image To Amazon ECR
      id: push-image
      run: |
        echo "Pushing Docker Image"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Set IMAGE env var
      run: |
        echo "IMAGE=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_ENV
    
    outputs:
      ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
      IMAGE: ${{ env.IMAGE }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env: 
      ECS_SERVICE: quiz-app-dev-ecs-service 
      ECS_CLUSTER: quiz-app-dev-ecs-cluster
      ECS_TASK_DEFINITION: quiz-app-dev-td
      ECS_CONTAINER_NAME: quiz-app-dev-container
      AWS_DEFAULT_REGION: ap-southeast-2
      ECR_REPOSITORY: ${{ secrets.Backend_REPO }}
      IMAGE_TAG: ${{ github.sha }}
    
    steps:
    - name: Configure AWS Credentials
      id: config-aws-cre
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Download task task-definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
    
    - name: Debug
      run: |
        echo "Docker Image URL: ${{ needs.build.outputs.IMAGE }}"
    
    - name: update the existing task definition with new image
      id: new-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECS_CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
    
    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      id: new-svc-dep
      with:
        task-definition: ${{ steps.new-task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    - name: Notification
      if: always()
      run: |
        echo "slack notification"